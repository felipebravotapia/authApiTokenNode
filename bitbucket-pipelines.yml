image: node:12.14.0
pipelines:
  branches:
    dev:
      - step:
          name: Build
          script:
            # Seteamos el nombre que tendrá la imagen.
            - export IMAGE_NAME=$AZURE_URL_REGISTRY_DESA_QA_BRA/$APPLICATION_NAME:v$BITBUCKET_BUILD_NUMBER
            - echo $IMAGE_NAME
            # Compilamos la imagen docker con el nombre de la imagen
            - docker build -t $IMAGE_NAME .
            # Nos logeamos a Azure CR
            - docker login pentabrasildevqa.azurecr.io --username $AZURE_USER_REGISTRY_DESA_QA_BRA --password $AZURE_PASSWORD_REGISTRY_DESA_QA_BRA
            # Enviamos la imagen recién construida a Azure CR
            - docker push $IMAGE_NAME
          services:
            - docker
      - step:
          name: Deploy Application on K8s
          deployment: develop
          script:
            # Seteamos la versión de la nueva imagen en nuestro deployment.yml
            #- sed -i 's/latest/v$BITBUCKET_BUILD_NUMBER/g' k8s/deployment.yaml
            - sed -i "s|latest|v$BITBUCKET_BUILD_NUMBER|g" k8s/deployment.yaml
            - sed -i "s|containerPortVar|$APP_PORT|g" k8s/deployment.yaml
            - sed -i "s|appPathService|$APP_PATH_SERVICE|g" k8s/deployment.yaml
            - sed -i "s|appVersion|$APP_VERSION|g" k8s/deployment.yaml
            - sed -i "s|appName|$APP_NAME|g" k8s/deployment.yaml
            - sed -i "s|appName|$APP_NAME|g" k8s/scale.yaml
            - sed -i "s|appName|$APP_NAME|g" k8s/service.yaml
            - sed -i "s|containerPortVar|$APP_PORT|g" k8s/service.yaml
            # Se aplica el deploy de todo el directorio k8s.
            - pipe: microsoft/azure-aks-deploy:1.0.1
              variables:
                AZURE_APP_ID: $AZURE_DEV_QA_APP_ID
                AZURE_PASSWORD: $AZURE_DEV_QA_PASSWORD
                AZURE_TENANT_ID: $AZURE_DEV_QA_TENANT_ID
                AZURE_AKS_NAME: 'dev-aks'
                AZURE_RESOURCE_GROUP: 'RG-vnet-penta-desa'
                KUBECTL_COMMAND: 'apply'
                KUBECTL_ARGUMENTS: '-f k8s'
    qa:
      - step:
          name: Build
          script:
            # Seteamos el nombre que tendrá la imagen
            - export IMAGE_NAME=$AZURE_URL_REGISTRY_DESA_QA_BRA/$APPLICATION_NAME:v$BITBUCKET_BUILD_NUMBER
            # Compilamos la imagen docker con el nombre de la imagen
            - docker build -t $IMAGE_NAME .
            # Nos logeamos a Azure CR
            - docker login pentabrasildevqa.azurecr.io --username $AZURE_USER_REGISTRY_DESA_QA_BRA --password $AZURE_PASSWORD_REGISTRY_DESA_QA_BRA
            # Enviamos la imagen recién construida a Azure CR
            - docker push $IMAGE_NAME
          services:
            - docker
      - step:
          name: Deploy Application on K8s
          deployment: qa
          script:
            # Seteamos la versión de la nueva imagen en nuestro deployment.yml
            #- sed -i 's/latest/v$BITBUCKET_BUILD_NUMBER/g' k8s/deployment.yaml
            - sed -i "s|latest|v$BITBUCKET_BUILD_NUMBER|g" k8s/deployment.yaml
            - sed -i "s|containerPortVar|$APP_PORT|g" k8s/deployment.yaml
            - sed -i "s|appPathService|$APP_PATH_SERVICE|g" k8s/deployment.yaml
            - sed -i "s|appVersion|$APP_VERSION|g" k8s/deployment.yaml
            - sed -i "s|appName|$APP_NAME|g" k8s/deployment.yaml
            - sed -i "s|appName|$APP_NAME|g" k8s/scale.yaml
            - sed -i "s|appName|$APP_NAME|g" k8s/service.yaml
            - sed -i "s|containerPortVar|$APP_PORT|g" k8s/service.yaml
            # Se aplica el deploy de todo el directorio k8s.
            - pipe: microsoft/azure-aks-deploy:1.0.1
              variables:
                AZURE_APP_ID: $AZURE_DEV_QA_APP_ID
                AZURE_PASSWORD: $AZURE_DEV_QA_PASSWORD
                AZURE_TENANT_ID: $AZURE_DEV_QA_TENANT_ID
                AZURE_AKS_NAME: 'qa-aks-cluster'
                AZURE_RESOURCE_GROUP: 'RG-CLUSTER-QA'
                KUBECTL_COMMAND: 'apply'
                KUBECTL_ARGUMENTS: '-f k8s'
    master:
      - step:
          name: Build
          script:
            # Seteamos el nombre que tendrá la imagen
            - export IMAGE_NAME=pentabrasilprod.azurecr.io/$APPLICATION_NAME:v$BITBUCKET_BUILD_NUMBER
            # Compilamos la imagen docker con el nombre de la imagen
            - docker build -t $IMAGE_NAME .
            # Nos logeamos a Azure CR
            - docker login pentabrasilprod.azurecr.io --username $AZURE_USER_REGISTRY_PROD_BRA --password $AZURE_PASSWORD_REGISTRY_PROD_BRA
            # Enviamos la imagen recién construida a Azure CR
            - docker push $IMAGE_NAME
          services:
            - docker
      - step:
          name: Deploy Application on K8s
          trigger: manual
          deployment: production
          script:
            # Seteamos la versión de la nueva imagen en nuestro deployment.yml
            #- sed -i 's/latest/v$BITBUCKET_BUILD_NUMBER/g' k8s/deployment.yaml
            - sed -i "s|latest|v$BITBUCKET_BUILD_NUMBER|g" k8s/deployment.yaml
            - sed -i "s|pentabrasildevqa|pentabrasilprod|g" k8s/deployment.yaml
            # Se aplica el deploy de todo el directorio k8s.
            - pipe: microsoft/azure-aks-deploy:1.0.1
              variables:
                AZURE_APP_ID: $AZURE_PROD_APP_ID
                AZURE_PASSWORD: $AZURE_PROD_PASSWORD
                AZURE_TENANT_ID: $AZURE_DEV_QA_TENANT_ID
                AZURE_AKS_NAME: 'prod-aks'
                AZURE_RESOURCE_GROUP: 'RG-vnet-penta-front'
                KUBECTL_COMMAND: 'apply'
                KUBECTL_ARGUMENTS: '-f k8s'
